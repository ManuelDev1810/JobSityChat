@using Microsoft.AspNetCore.SignalR.Client
@using JobSityChat.UI.Data
@using Microsoft.Extensions.Configuration
@using JobSityChat.UI.Persistent 

@implements IAsyncDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration


<AuthorizeView>
    <Authorized>
        <p>Welcome to the chat room <strong>@userName.Substring(0, userName.IndexOf('@'))</strong>, feel free to start a new conversation or get a stock quote.</p>
        <form class="needs-validation" novalidate>
            <div class="form-row">
                <div class="col-md-10 mb-3">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text">Message:</span>
                        </div>
                        <input @bind="userMessage" type="text" class="form-control" placeholder="Write a message..." required>
                        <button type="button" class="btn btn-primary" @onclick="Send" disabled="@(!IsConnected)"><span class="oi oi-media-play"></span></button>
                    </div>
                </div>
            </div>
        </form>

        @* Messages *@

        @foreach (var message in messages)
        {
            <div class="d-flex">
                <div class="p-2"><strong>@message.Name: </strong></div>
                <div class="p-2">@message.Message</div>
                <div class="ml-auto p-2"><i>@message.CreatedAt</i></div>
            </div>
            <hr />
        }
    </Authorized>

    <NotAuthorized>
        Please log in to start a new conversation
    </NotAuthorized>
</AuthorizeView>



@code {

    private HubConnection hubConnection;
    private List<MessageViewModel> messages = new List<MessageViewModel>();
    private Guid userID;
    private string userName;
    private string userMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //Setting the user
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            userName = user.Identity.Name;

            //Making the hub connection
            hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri(Configuration["SignalR:Route"]))
            .Build();

            //Receving the message from the API
            hubConnection.On<MessageViewModel>("ReceiveMessage", (model) =>
            {
                messages.Add(model);
                messages = messages.OrderByDescending(t => t.CreatedAt).ToList();
                messages.TakeLast(50);
                StateHasChanged();
            });

            await hubConnection.StartAsync();
        }
        catch (Exception)
        {
            messages.Add(new MessageViewModel()
            {
                Name = ChatConstants.JOB_SITY_BOT,
                Message = ChatConstants.SIGNALR_NOT_CONNECTED,
                CreatedAt = DateTime.Now
            });

            StateHasChanged();
        }
    }

    //Sending the message
    public Task Send()
    {
        var task = hubConnection.SendAsync("SendMessage",
        new
        {
            ID = new Guid(),
            Name = userName,
            Message = userMessage,
            CreatedAt = DateTime.Now
        });

        //Cleaning the message input
        userMessage = String.Empty;

        return task;
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}